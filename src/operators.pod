=head0 Operators

X<operator>

Operators are very short names for often used routines. They have special
calling syntax, and can manipulate each other.

Consider the table tennis example from the previous chapter. Suppose you want
to plot the number of sets that each player won in a tournament. This example
makes a very simple text output by printing C<X> characters to represent
horizontal bars:

=begin programlisting

    use v6;

    my @scores = 'Ana' => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

    my $screen-width     = 30;

    my $label-area-width = 1 + [max] @scores».key».chars;
    my $max-score        = [max] @scores».value;
    my $unit             = ($screen-width - $label-area-width) / $max-score;

    for @scores {
        my $format = '%- ' ~ $label-area-width ~ "s%s\n";
        printf $format, .key, 'X' x ($unit * .value);
    }

=end programlisting

This program produces the output:

=begin screen

    Ana     XXXXXXXXXXXXXXXXXXXXXX
    Dave    XXXXXXXXXXXXXXXX
    Charlie XXXXXXXXXXX
    Beth    XXXXXXXXXXX

=end screen

The line:

=begin programlisting

    my @scores = 'Ana' => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

=end programlisting

... already contains three different operators: C<=>, C<< => >>, and C<,>.

X<assignment>
X<operator, assignment>
X<operator, =>

The C<=> operator is the I<assignment operator>--it takes the values from the
right-hand side, and stores them in the variable on the left-hand side, here
C<@scores>.

=begin sidebar

Like other languages that have adopted a similar syntax to C, Perl 6 allows for
a shorthand way to write certain assignments.  You can express any assignment
of the form  C<< $var = $var R<op> EXPR >> as C<< $var R<op>= EXPR >>.  For
example, C<~> (tilde) is the string concatenation operator; to append some text
to the end of a string, you can write C<$string ~= "text">, which is equivalent
to C<$string = $string ~ "text">.

=end sidebar

X<pair>
X<< operator,=> >>
X< operator, fat arrow>

The C<< => >> operator (the I<fat arrow>) constructs C<Pair> objects. A Pair
stores a key and a value; the key is on the left-hand side of the C<< => >>
operator, the value on the right. This operator also has a special feature: it
causes the parser to interpret any bare identifier on the left-hand side as a
string.  You could also write the example line as:

=begin programlisting

    my @scores = Ana => 8, Dave => 6, Charlie => 4, Beth => 4;

=end programlisting

Finally, the C<,> operator constructs a C<Parcel>, which is a sequence
of objects. In this case the objects are pairs.

X<infix>
X<operator, infix operators>
X<term>

All of the three operators above are I<infix> operators, which means they
stand in between two I<terms>. A term can be a literal like C<8> or C<'Dave'>,
or a combination of other terms and operators.

X<postcircumfix>
X<operator, postcircumfix>
X<postfix>
X<operator, postfix>

The previous chapter already used other types of operators. It contained the
statement C<%games{$p1}++;>.  The I<postcircumfix> operator C<{...}> occurs
after (the I<post>) a term, and consists of two symbols (an opening and a
closing curly bracket) which enclose (I<circumfix>) another term.  After this
postcircumfix operator is an ordinary I<postfix> operator with name C<++>,
which increments the value it qualifies. You may not use whitespace between a
term and its postfix or postcircumfix operators.

X<postfix>
X<operator, postfix>

Another operator type is the I<prefix> operator, which occurs before a term. An
example is the C<-> operator, which negates the following numeric value, as in
C<my $x = -4>.

The C<-> operator can also mean subtraction, so C<say 5 - 4> will print a C<1>.
To distinguish the prefix operator C<-> from the infix operator C<->, the Perl
6 parser always keeps track of whether it expects an infix operator or a term.
A term can have zero or more prefix operators, so you can actually write C<say
4 + -5>. After the C<+> (an infix operator), the compiler expects a term, so as
to interpret the C<-> as a prefix operator to the term C<5>.

The next line containing new features is:

=begin programlisting

    my $label-area-width = 1 + [max] @scores».key».chars;

=end programlisting

It begins harmlessly with a variable declaration C<my $label-area-width> and an
assignment. Next comes a simple numeric addition, C<1 + ...>. The right side of
the C<+> operator is more complicated.

X<operator, max>

The infix C<max> operator returns the greater of two values, so C<2 max 3>
returns 3. Square brackets around an infix operator cause Perl to apply the
operator to a list element by element.  C<[max] 1, 5, 3, 7> is the same as C<1
max 5 max 3 max 7> and evaluates to C<7>.

Likewise, you can write C<[+]> to get the sum of a list of values, C<[*]> for
the product, and C<< [<=] >> to check if a list is ordered by ascending values.

Next comes the expression C<@scores».key».chars>. Just like C<@variable.method>
calls a method on C<@variable>, C<@array».method> calls a method for each item
in C<@array> and returns the list of the return values.

C<»> is a I<hyper operator>. It is also a Unicode character.  If your operating
system does not make it easy to write it you can also write it using two angle
brackets (C<<< >> >>>)N<Ubuntu 10.4: In
System/Preferences/Keyboard/Layouts/Options/Compose Key position select one of
the keys to be the "Compose" key. Then press Compose-key and the "greater than"
key twice.> C<@scores».key> is a list of all the keys of the pair objects in
C<@scores>, and C<@scores».key».chars> is a list of the length of all keys in
C<@scores>.

The expression C<[max] @scores».key».chars> gives the largest of these
values. It is the same as:

=begin programlisting

    @scores[0].key.chars
        max @scores[1].key.chars
        max @scores[2].key.chars
        max ...

=end programlisting

X<meta operator, reduction>
X<meta operator, []>

These circumfix square brackets are the I<reduction meta operator>, which
transforms the enclosed infix operator into an operator that expects a list (a
I<listop>), and carries out the operation between each two consecutive list
items.

For plotting the names of the players and bar charts, the program needs to
know how much space to allocate for the player names. Adding 1 to it leaves
space for a single blank space between the name of the longest player and the
left edge of the bars.

The program next determines the maximum score:

=begin programlisting

    my $max-score       = [max] @scores».value;

=end programlisting

The drawing area has the width C<$screen-width - $label-area-width>, so for
each score, it should print:

=begin programlisting

    my $unit = ($screen-width - $label-area-width) / $max-score;

=end programlisting

... amount of C<X> characters. This expression uses the infix operators C<->
and C</> for numerical calculations.

Now all the necessary informations are in place, and the chart can print:

=begin programlisting

    for @scores {
        my $format = '%- ' ~ $label-area-width ~ "s%s\n";
        printf $format, .key, 'X' x ($unit * .value);
    }

=end programlisting

X<printf>

These lines loop over the items in C<@scores>, binding them to the special
variable C<$_> one at a time. For each item, the program uses the C<printf>
built-in function to print both the name of the player and a bar.  This
function is similar to C<printf> in C and Perl 5.  It takes a format string,
which specifies how to print the following parameters. If C<$label-area-width>
is 8, the format string is C<"%- 8s%s\n">, which means a string (C<'s'>) filled
to 8 spaces (C<' 8'>) and left-justified (C<'-'>), followed by another string
and a newline.

The first string is the name of the player and the second is the bar.

X<operator, x>
X<repetition operator>

The infix C<x> operator, or I<repetition operator>, generates this bar. It
takes a string on the left-hand side and a number on the right-hand side, and
sticks the strings together as many times as the number specifies, so C<'ab' x
3> returns the string C<'ababab'>. C<.value> returns the value of the current
pair, C<($unit * .value)> multiplies that values with C<$unit>, and C<'X' x
($unit * .value)> returns as that many C<X> characters.

=head1 A Word on Precedence

X<operator precedence>
X<precedence>

The explanations of this example have one implication which is not entirely
obvious.  In the line:

=begin programlisting

    my @scores = 'Ana' => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

=end programlisting

... the right-hand side of the assignment produces a list (because of the C<,>
operator) that is made of pairs (because of C<< => >>), and the result is then
assigned to the array variable. You could think of other ways for Perl 6 to
interpret this program. Perl 5 will interpret it as:

=begin programlisting

    (my @scores = 'Ana') => 8, 'Dave' => 6, 'Charlie' => 4, 'Beth' => 4;

=end programlisting

... so that C<@scores> will contain only one item.  The rest of the expression
is merely a list of constants evaluated, then discarded.

X<precedence, rules>

I<Precedence rules> govern how a parser will parse this line.  Perl 6's
precedence rules state that the infix C<< => >> operator binds its arguments
more tightly than the infix C<,> operator, which in turn binds more tightly
than the C<=> assignment operator.

=for author

right-hand or left-hand?

=end for

=begin sidebar

There are actually two assignment operators with different precedence. When the
right-hand side is a scalar, the I<item assignment operator> with tight
precedence is used, otherwise the loose-precedence I<list assignment operator>
is used. This allows the two expressions C<$a = 1, $b = 2> and C<@a = 1, 2> to
both mean something sensible: assignment to two variables in a list, and
assignment of a two-item list to a single variable>.

=end sidebar

Perl 6's precedence rules allow you to express many common operations
naturally, without thinking about precedence at all.  If you want to force a
different parsing precedence, surround an expression with parentheses, so that
this new group has the tightest possible precedence:

=begin programlisting

    say 5 - 7 / 2;      # 5 - 3.5  = 1.5
    say (5 - 7) / 2;    # (-2) / 2 =  -1

=end programlisting

=begin table Precedence table

=headrow

=row

=cell Examples

=cell Name

=bodyrows

=row

=cell

=cell (tightest precedence)

=row

=cell C<(), 42.5>

=cell term

=row

=cell C<42.rand>

=cell method calls and postcircumfixes

=row

=cell C<$x++>

=cell autoincrement and autodecrement

=row

=cell C<$x**2>

=cell exponentiation operator

=row

=cell C<?$x, !$x>

=cell boolean prefix

=row

=cell C<+$x, ~$x>

=cell prefix context operators

=row

=cell C<2*3, 7/5>

=cell multiplicative infix operators

=row

=cell C<1+2, 7-5>

=cell additive infix operators

=row

=cell C<$x x 3>

=cell replication operators

=row

=cell C<$x ~ ".\n">

=cell string concatenation

=row

=cell C<1&2>

=cell junctive AND

=row

=cell C<1|2>

=cell junctive OR

=row

=cell C<abs $x>

=cell named unary prefix

=row

=cell C<$x cmp 3>

=cell non-chaining binary operators

=row

=cell C<$x == 3>

=cell chaining binary operators

=row

=cell C<$x && $y>

=cell tight AND infix

=row

=cell C<$x || $y>

=cell tight OR infix

=row

=cell C<< $x > 0 ?? 1 !! -1 >>

=cell conditional operator

=row

=cell C<$x = 1>

=cell item assignment

=row

=cell C<not $x>

=cell loose unary prefix

=row

=cell C<1, 2>

=cell comma

=row

=cell C<1, 2 Z @a>

=cell list infix

=row

=cell C<@a = 1, 2>

=cell list prefix, list assignment

=row

=cell C<$x and say "Yes">

=cell loose AND infix

=row

=cell C<$x or die "No">

=cell loose OR infix

=row

=cell C<;>

=cell statement terminator

=row

=cell

=cell (loosest precedence)

=end table

=head1 Comparisons and Smart Matching

X<value identity>
X<===>
X<operator, ===>

There are several ways to compare objects in Perl. You can test for value
equivalence using the C<===> infix operator. For immutable objectsN<Objects
whose values I<can not> be changed; literal values.  For instance, the literal
C<7> will always and forever be just a C<7>.>, this is an ordinary value
comparison.  C<"hello" === "hello"> is true because both strings are immutable
and have the same value.

For mutable objects, C<===> compares their identities.  Two objects only share
the same identity if, in fact, they are the same object.  Even if the two
arrays C<@a> and C<@b> I<contain> the same values, if they containers are two
separate array objects, they will have different identities and will I<not> be
equivalent when compared with C<===>:

=begin programlisting

    my @a = 1, 2, 3;
    my @b = 1, 2, 3;

    say @a  === @a;    # 1
    say @a  === @b;    # 0

    # these use identity for value

    say 3   === 3;     # 1
    say 'a' === 'a';   # 1

    my $a = 'a';
    say $a === 'a';     # 1

=end programlisting

X<operator, eqv>
X<eqv>

The C<eqv> operator returns C<True> only if two objects are of the same type
I<and> the same structure. With C<@a> and C<@b> as defined in the previous
example, C<@a eqv @b> is true because C<@a> and C<@b> contain the same values
each. On the other hand C<'2' eqv 2> returns C<False>, because the left
argument is a string, the right an integer and so they are not of the same
type.

=for author

clarify "same structure"

=end for

=head2 Numeric Comparisons

You can ask if two objects have the same numeric value with the C<==> infix
operator.  If one of the objects is not numeric,  Perl will do its best to
make it numeric before doing the comparison.  If there is no good way to
convert an object to a number, Perl will use the default of C<0>.

=begin programlisting

    say 1 == 1.0;      # 1
    say 1 == '1';      # 1
    say 1 == '2';      # 0
    say 3 == '3b'      # 1

=end programlisting

X<< < >>
X<< operator, < >>
X<< <= >>
X<< operator, <= >>
X<< >= >>
X<< operator, >= >>
X<< > >>
X<< operator, > >>
X<!>
X<operator, !>

The operators C<< < >>, C<< <= >>, C<< >= >>, and C<< > >> compare the relative
size of numbers. C<!=> returns C<True> if the two objects differ in their
numerical value.

When you use an array or list as a number, it evaluates to the number of items
in that list.

=begin programlisting

    my @colors = <red blue green>;

    if @colors == 3 {
        say "It's true, @colors contains 3 items";
    }

=end programlisting

=head2 String Comparisons

X<eq>
X<operator, eq>

Just like C<==> converts its arguments to numbers before comparing, C<eq> as an
infix operator compares for string equality, converting its arguments to
strings as necessary:

=begin programlisting

    if $greeting eq 'hello' {
        say 'welcome';
    }

=end programlisting

Other operators compare strings lexicographically.

=begin table Operators and Comparisons

=headrow

=row

=cell Number Comparison

=cell String Comparison

=cell Stands for

=bodyrows

=row

=cell ==

=cell eq

=cell equals

=row

=cell !=

=cell ne

=cell not equal

=row

=cell !==

=cell !eq

=cell not equal

=row

=cell <

=cell lt

=cell less than

=row

=cell <=

=cell le

=cell less or equal

=row

=cell >

=cell gt

=cell greater than

=row

=cell >=

=cell ge

=cell greater or equal

=end table

For example, C<'a' lt 'b'> is true, and likewise C<'a' lt 'aa'>.

X<!=>
X<operator, !=>
X<ne>
X<operator, ne>
X<!eq>
X<operator, !eq>

C<!=> is really just a convenience for C<!==>, which in turn is really the C<!>
meta operator added to the infix C<==> operator. An equivalent explanation
applies to C<ne> and C<!eq>.

=head3 Three-way Comparison

X<leg>
X<operator, leg>
X<cmp>
X<operator, cmp>
X<< <=> >>
X<< operator, <=> >>

The three-way comparison operators take two operands, and return
C<Order::Increase> if the left is smaller, C<Order::Same> when both are equal,
and C<Order::Decrease> if the right operand is smallerN<C<Order::Increase>,
C<Order::Same>, and C<Order::Decrease> are enumerations (enums); see
L<subtypes>>. For numbers, the comparison operator is C<< <=> >>, and for
strings it's C<leg> (from I<l>esser, I<e>qual, I<g>reater). The infix C<cmp>
operator is a type sensitive three-way comparison operator which compares
numbers like C<< <=> >>, strings like C<leg>, and (for example) pairs first by
key, and then by value if the keys are identical:

=begin programlisting

    say 10   <=> 5;       # +1
    say 10   leg 5;       # because '1' lt '5'
    say 'ab' leg 'a';     # +1, lexicographic comparison

=end programlisting

X<.sort>

A typical use case for three-way comparison is sorting. The C<.sort> method in
lists can take a block or function that takes two values, compares them, and
returns a value less than, equal to or, greater than 0. The sort method then
orders the values according to that return value:

=begin programlisting

    say ~<abstract Concrete>.sort;
    # output: Concrete abstract

    say ~<abstract Concrete>.sort:
            -> $a, $b { uc($a) leg uc($b) };
    # output: abstract Concrete

=end programlisting

The default comparison is case sensitive; by comparing not the values, but
their upper case variant, this example sorts case insensitively.

=head2 Smart Matching

X<~~>
X<smart match>

The various comparison operators all coerce their arguments to certain types
before comparing them. This is useful if you wish to be very specific about
what kind of comparison you want and are unsure of the types of the values you
are comparing.  Perl 6 provides another operator that allows you to perform
comparisons that Do The Right Thing with C<~~>, the smart match operator.

=begin programlisting

    if $pints-drunk ~~ 8 {
        say "Go home, you've had enough!";
    }

    if $country ~~ 'Sweden' {
        say "Meatballs with lingonberries and potato moose, please."
    }

    unless $group-size ~~ 2..4 {
        say "You must have between 2 and 4 people to book this tour.";
    }

=end programlisting

The smart match operator always decides what kind of comparison to do based
upon the type of the value on the right hand side. In the previous examples,
the comparisons are numeric, string, and range, respectively.  While this
chapter has demonstrated the numeric and string comparison operators --C<==>
and C<eq>--there is no operator for comparing ranges. This is part of the power
of smart matching: more complex types can define interesting and useful ways to
compare themselves to other things.

=begin sidebar

Smart match works by calling the C<ACCEPTS> method on the operand on the right
hand side and passing it the operand on the left hand side as an argument. Thus
C<$answer ~~ 42> actually desugars to a method call like
C<42.ACCEPTS($answer)>.  The upshot of this is that--after reading the chapter
on writing classes and methods--you too will be able to write things that can
smart-match against just by implementing an C<ACCEPTS> method to do the right
thing.

=for author

TODO: explain 'desugars' terminology

TODO: add := operator used in subs-n-sigs.pod

=end for

=end sidebar

=for vim: spell
