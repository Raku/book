=head0 The Basics

Z<sec:basics>

Perl originated as a programming language intended to gather and summarize
information from text files.  It's still strong in text processing, but Perl 5
is also a powerful general-purpose programming language.  Perl 6 is even better.

Suppose that you host a table tennis tournament.  The referees tell you the
results of each game in the format C<Player1 Player2 | 3:2>, which means
that C<Player1> won against C<Player2> by 3 to 2 sets. You need a script that
sums up how many matches and sets each player has won to determine the overall
winner.

The input data (stored in a file called "scores") looks like this:

    Beth Ana Charlie Dave
    Ana Dave | 3:0
    Charlie Beth | 3:1
    Ana Beth | 2:3
    Dave Charlie | 3:0
    Ana Charlie | 3:1
    Beth Dave | 0:3

The first line is the list of players.  Every subsequent line records a result
of a match.

Here's one way to solve that problem in Perl 6:

=begin programlisting

    use v6;

    my $file  = open 'scores';
    my @names = $file.get.words;

    my %matches;
    my %sets;

    for $file.lines -> $line {
        my ($pairing, $result) = $line.split(' | ');
        my ($p1, $p2)          = $pairing.words;
        my ($r1, $r2)          = $result.split(':');

        %sets{$p1} += $r1;
        %sets{$p2} += $r2;

        if $r1 > $r2 {
            %matches{$p1}++;
        } else {
            %matches{$p2}++;
        }
    }

    my @sorted = @names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse;

    for @sorted -> $n {
        say "$n has won %matches{$n} matches and %sets{$n} sets";
    }

=end programlisting

This produces the output:

=begin screen

    Ana has won 2 matches and 8 sets
    Dave has won 2 matches and 6 sets
    Charlie has won 1 matches and 4 sets
    Beth has won 1 matches and 4 sets

=end screen

X<v6>

Every Perl 6 program should begin with C<use v6;>. This line tells the compiler
which version of Perl the program expects. Should you accidentally run the file
with Perl 5, you'll get a helpful error message.

X<statement>

A Perl 6 program consists of zero or more statements. A I<statement> ends with
a semicolon or a curly bracket at the end of a line:

=begin programlisting

    my $file = open 'scores';

=end programlisting

X<lexical>
X<variables, lexical>
X<block>

C<my> declares a lexical variable. Lexical variables are visible only
in the current block from the point of declaration to the end of the
block. If there's no enclosing block, it's visible throughout the
remainder of the file. A block is any part of the code enclosed between
curly braces { }.

X<sigil>
X<identifier>

A variable name begins with a I<sigil>, which is non-alpha-numeric
symbol such as C<$>, C<@>, C<%>, or C<&>--or occasionally the double
colon C<::>. Sigils indicate the structural interface for the variable,
such as whether it should be treated as a single value or a compound value
or a subroutine, etc. After the sigil comes an I<identifier>, which may
consist of letters, digits and the underscore. Between letters you can
also use a dash C<-> or an apostrophe C<'>, so C<isn't> and
C<double-click> are valid identifiers.

X<variable, scalar>
X<scalar>

The C<$> sigil indicates a I<scalar> variable, which indicates that the
variable stores a single value.

X<files, handle>
X<file handle>
X<assignment>

The built-in function C<open> opens a file, here named F<scores>, and returns a
I<file handle>--an object representing that file. The equality sign C<=>
I<assigns> that file handle to the variable on the left, which means that
C<$file> now stores the file handle.

X<strings, literal>
X<string literal>
X<string>

C<'scores'> is a I<string literal>. A string is a piece of text, and a string
literal is a string which appears directly in the program. In this line, it's
the argument provided to C<open>.

=begin programlisting

    my @names = $file.get.words;

=end programlisting

X<array>
X<method>
X<invocant>

The right-hand side calls a I<method> --a named group of behavior-- named C<get>
on the file handle stored in C<$file>.  The C<get> method reads and returns 
one line from the file, removing the line ending.  C<words> is also a method, 
called on the string returned from C<get>. C<words> decomposes its 
I<invocant>--the string on which it operates--into a list of words, which
here means strings without whitespace.
It turns the single string C<'Beth Ana Charlie Dave'> into the list of 
strings C<'Beth', 'Ana', 'Charlie', 'Dave'>. 

Finally, this list gets
stored in the array C<@names>.  The C<@> sigil marks the declared variable as
an C<Array>.  Arrays store ordered lists.

=begin programlisting

    my %matches;
    my %sets;

=end programlisting

X<hash>

These two lines of code declare two hashes.  The C<%> sigil marks each
variable as a C<Hash>.  A C<Hash> is an unordered collection of pairs of
keys and values.  Other programming languages call that a I<hash table>,
I<dictionary>, or I<map>.  You can query a hash table for the value that
corresponds to a certain C<$key> with C<%hash{$key}>N<Unlike Perl 5, in
Perl 6 the sigil does not change when accessing an array or hash with
C<[ ]> or C<{ }>. This is called I<M<sigil invariance>>.>.

In the score counting program, C<%matches> stores the number of matches each
player has won.  C<%sets> stores the number of sets each player has won.


=for author

The following paragraph seems out of place.

=end

Sigils indicate the default access method for a variable. Variables
with the C<@> sigil are accessed positionally; variables with the C<%>
sigil are accessed by string key. The C<$> sigil, however, indicates a
general container that can hold anything and be accessed in any manner.
A scalar can even contain a compound object like an C<Array> or a
C<Hash>; the C<$> sigil signifies that it should be treated as a single
value, even in a context that expects multiple values (as with an
C<Array> or C<Hash>).

=begin programlisting

    for $file.lines -> $line {
        ...
    }

=end programlisting

X<for>
X<block>

C<for> produces a loop that runs the I<block> delimited by curly brackets and
containing C<...> once for each item of the list, setting the variable C<$line>
to the current value of each iteration. C<$file.lines> produces a list of the
lines read from the file F<scores>, starting with the line where the previous
calls to C<$file.get> left off, and going all the way to the end of the file.

During the first iteration, C<$line> will contain the string C<Ana vs Dave |
3:0>.  During the second, C<Charlie vs Beth | 3:1>, and so on.

=begin programlisting

    my ($pairing, $result) = $line.split(' | ');

=end programlisting

C<my> can declare multiple variables simultaneously. The right-hand side of the
assignment is a call to a method named C<split>, passing along the string
C<' | '> as an argument.

C<split> decomposes its invocant into a
list of strings, so that joining the list items with the separator C<' | '>
produces the original string.

C<$pairing> gets the first item of the returned list, and
C<$result> the second.

After processing the first line, C<$pairing> will hold the string C<Ana vs
Dave> and C<$result> C<3:0>.

The next two lines follow the same pattern:

=begin programlisting

    my ($p1, $p2) = $pairing.words;
    my ($r1, $r2) = $result.split(':');

=end programlisting

The first extracts and stores the names of the two players in the variables
C<$p1> and C<$p2>.  The second extracts the results for each player and stores
them in C<$r1> and C<$r2>.

After processing the first line of the file, the variables contain the values:

=begin table Contents of Variables

=headrow

=row

=cell Variable

=cell Contents

=bodyrows

=row

=cell C<$line>

=cell C<'Ana Dave | 3:0'>

=row

=cell C<$pairing>

=cell C<'Ana Dave'>

=row

=cell C<$result>

=cell C<'3:0'>

=row

=cell C<$p1>

=cell C<'Ana'>

=row

=cell C<$p2>

=cell C<'Dave'>

=row

=cell C<$r1>

=cell C<'3'>

=row

=cell C<$r2>

=cell C<'0'>

=end table

The program then counts the number of sets each player has won:

=begin programlisting

    %sets{$p1} += $r1;
    %sets{$p2} += $r2;

=end programlisting

This is a shortcut for:

=begin programlisting

    %sets{$p1} = %sets{$p1} + $r1;
    %sets{$p2} = %sets{$p2} + $r2;

=end programlisting

X<Any>
X<+=>
X<operators, +=>

C<+= $r1> means I<increase the value in the variable on the left by $r1>.  In
the first iteration C<%sets{$p1}> is not yet set, so it defaults to a special
value called C<Any>. The addition and incrementing operators treat C<Any> as a
number with the value of zero.

X<fat arrow>
X<< => >>
X<pair>
X<autovivification>

Before these two lines execute, C<%sets> is empty. Adding to an entry not in
the hash will cause that entry to spring into existence just-in-time, with a
value starting at zero. (This is I<autovivification>). After these two lines
have run for the first time, C<%sets> contains C<< 'Ana' => 3, 'Dave' => 0 >>.
(The fat arrow C<< => >> separates key and value in a C<Pair>.)

=begin programlisting

    if $r1 > $r2 {
        %matches{$p1}++;
    } else {
        %matches{$p2}++;
    }

=end programlisting

If C<$r1> has a larger value than C<$r2>, C<%matches{$p1}> increments by one.
If C<$r1> is not larger than C<$r2>, C<%matches{$p2}> increments. Just as in
the case of C<+=>, if either hash value did not exist previously, it is
autovivified by the increment operation.

X<postincrement>
X<operators, postincrement>
X<preincrement>
X<operators, preincrement>

C<$thing++> is short for C<$thing += 1> or C<$thing = $thing + 1>, with the
small exception that the return value of the expression is C<$thing> I<before>
the increment, not the incremented value. If, as you can do in many other
programming languages, you can use C<++> as a prefix, it returns the
incremented value; C<my $x = 1; say ++$x> prints C<2>.

=begin programlisting

    my @sorted = @names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse;

=end programlisting

X<topic variable>
X<topic>
X<variables, $_>

This line consists of three individually simple steps. An array's C<sort>
method returns a sorted version of the array's contents.  However, the default
sort on an array sorts by its contents.  To print player names in winner-first
order, the code must sort the array by the I<scores> of the players, not their
names.  The C<sort> method's argument is a I<block> used to transform the array
elements (the names of players) to the data by which to sort.  The array items
are passed in through the I<topic variable> C<$_>.

X<block>

You have seen blocks before: both the C<for> loop C<< -> $line { ... } >> and
the C<if> statement worked on blocks.  A block is a self-contained piece of
Perl 6 code with an optional signature (the C<< -> $line >> part).  See
L<signatures> for more information.

The simplest way to sort the players by score would be C<@names.sort({
%matches{$_} })>, which sorts by number of matches won. However Ana and Dave
have both won two matches. That simple sort doesn't account for the number of
sets won, which is the secondary criterion to decide who has won the
tournament.

X<stable sort>
X<sort, stable>

When two array items have the same value, C<sort> leaves them in the same order
as it found them.  Computer scientists call this a I<stable sort>. The program
takes advantage of this property of Perl 6's C<sort> to achieve the goal by
sorting twice: first by the number of sets won (the secondary criterion), then
by the number of matches won.

After the first sorting step, the names are in the order C<Beth Charlie Dave
Ana>.  After the second sorting step, it's still the same, because no one has
won fewer matches but more sets than someone else. Such a situation is entirely
possible, especially at larger tournaments.

C<sort> sorts in ascending order, from smallest to largest.  This is the
opposite of the desired order. Therefore, the code calls the C<.reverse> method
on the result of the second sort, and stores the final list in C<@sorted>.

=begin programlisting

    for @sorted -> $n {
        say "$n has won %matches{$n} matches and %sets{$n} sets";
    }

=end programlisting

X<say>
X<print>
X<operators, print>
X<operators, say>

To print out the players and their scores, the code loops over C<@sorted>,
setting C<$n> to the name of each player in turn.  Read this code as "For each
element of sorted, set C<$n> to the element, then execute the contents of the
following block."  C<say> prints its arguments to the standard output (the
screen, normally), followed by a newline.  (Use C<print> if you don't want the
newline at the end.)

X<interpolation>

When you run the program, you'll see that C<say> doesn't print the contents of
that string verbatim.  In place of C<$n> it prints the contents of the
variable C<$n>-- the
names of players stored in C<$n>.  This automatic substitution of code with its
contents is I<interpolation>. This interpolation happens only in strings
delimited by double quotes C<"...">. Single quoted strings C<'...'> do
not interpolate:

X<double-quoted strings>
X<strings, double-quoted>
X<single-quoted strings>
X<strings, single-quoted>

=begin programlisting

    my $names = 'things';
    say 'Do not call me $names'; # Do not call me $names
    say "Do not call me $names"; # Do not call me things

=end programlisting

Double quoted strings in Perl 6 can interpolate variables with the C<$>
sigil as well as blocks of code in curly braces. Since any arbitrary
Perl code can appear within curly braces, C<Array>s and C<Hash>es may be
interpolated by placing them within curly braces.


Arrays within
curly braces are interpolated with a single space character between each
item. Hashes within curly braces are interpolated as a series of
lines. Each line will contain a key, followed by a tab character, then
the value associated with that key, and finally a newline.

=begin programlisting

    say "Math: { 1 + 2 }"                   # Math: 3
    my @people = <Luke Matthew Mark>;
    say "The synoptics are: {@people}"      # The synoptics are: Luke Matthew Mark

    say "{%sets}";                          # From the table tennis tournament

    # Charlie 4
    # Dave    6
    # Ana     8
    # Beth    4

=end programlisting


When array and hash variables appear directly in a double-quoted string (and
not inside curly brackets), they are only interpolated if their name is
followed by a postcircumfix -- a bracketing pair that follows a
statement. It's also ok to have a method call between the variable name and
the postcircumfix.

X<Zen slice>

=begin programlisting

    my @flavours = <vanilla peach>;

    say "we have @flavours";           # we have @flavours
    say "we have @flavours[0]";        # we have vanilla
    # so-called "Zen slice"
    say "we have @flavours[]";         # we have vanilla peach

    # method calls ending in postcircumfix
    say "we have @flavours.sort()";    # we have peach vanilla

    # chained method calls:
    say "we have @flavours.sort.join(', ')";
                                    # we have peach, vanilla

=end programlisting


=head1 Exercises

B<1.> The input format of the example program is redundant: the first line
containing the name of all players is not necessary, because you can find out
which players participated in the tournament by looking at their names in the
subsequent rows.

How can you change the program if the first input line is omitted?
Hint: C<%hash.keys> returns a list of all keys stored in C<%hash>.

B<Answer:> Remove the line C<my @names = $file.get.words;>, and change:

=begin programlisting

    my @sorted = @names.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse;

=end programlisting

... into:

=begin programlisting

    my @sorted = B<%sets.keys>.sort({ %sets{$_} }).sort({ %matches{$_} }).reverse;

=end programlisting

B<2.> Instead of removing the redundancy, you can also use it to warn if a
player appears that wasn't mentioned in the first line, for example due to a
typo. How would you modify your program to achieve that?

B<Answer:> Introduce another hash with the names of the legitimate players as
keys, and look in this hash when the name of a player is read:

=begin programlisting

    ...
    my @names = $file.get.split(' ');
    B<my %legitimate-players;>
    B<< for @names -> $n { >>
    B<    %legitimate-players{$n} = 1;>
    B<}>

    ...

    for $file.lines -> $line {
        my ($pairing, $result) = $line.split(' | ');
        my ($p1, $p2)          = $pairing.split(' vs ');
        B<< for $p1, $p2 -> $p { >>
        B<    if !%legitimate-players{$p} {>
        B<        say "Warning: '$p' is not on our list!";>
        B<    }>
        B<}>

        ...
    }

=end programlisting

=for vim: spell
