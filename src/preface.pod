=head0 Preface

Z<sec:preface>

Perl 6 is a language specification for which multiple compilers and
interpreters exist in various stages of completeness. These implementations
have in turn influenced the design of the language by highlighting misfeatures,
contradictions, or features of difficult implementation and little benefit.
This process of iteration has produced a more cohesive and consistent language
specification.

Perl 6 is versatile, intuitive, and flexible.  It embraces several paradigms
like procedural, object oriented, and functional programming, and offers
powerful tools for parsing text.

=for author

Remove the next paragraph when appropriate.

=end for

This book is a work-in-progress. Even releases will contain some amount of
C<TODO> comments prior to the printing of the book.  We've left them in because
they might serve as useful cues for the reader as well as for us authors about
what remains to be done. Even so, we pray the reader's indulgence and
understanding.

=head1 Audience

This book is primarily for people who want to learn Perl 6. It is a series of
tutorials, not a comprehensive reference.  We expect some experience in another
programming language, though no prior knowledge of Perl is necessary. After
working through this book, you should have a solid grasp of the basics of Perl
6 sufficient to solve your own problems with Perl 6.

=head1 Format of this book

Each chapter opens with a reasonably complete example that illustrates the
topic of the chapter. We intend these examples to demonstrate how to use the
features, techniques, and idioms explained in the chapter in real programs.
Our goal is to convey the "flavor" of writing Perl 6 programs so that the
reader may proceed to write their own native Perl 6 programs rather than
programs that resemble some other languageN<Some programmers can still write
Fortran in any language, however :)>.

=head1 Relationship between Perl 6 and Perl 5

Perl 6 is the newest member of the family of languages known as Perl. It
represents a major break in syntactic and semantic compatibility from Perl 5,
thus the increase from 5 to 6. However, this does not mean that Perl 5 is going
away. In fact, quite the opposite. Both Perl 5 and Perl 6 have active developer
communities which mold the languages. Perl 5 developers try to extend the
language in various ways while keeping backwards compatibility with past
versions of Perl. Perl 6 developers extend the language by adding new syntactic
and semantic features that enable more power and expressiveness without the
restriction of backward compatibility with Perl 5 or earlier versions.

Some might ask, "Why call it Perl if it's a different language?" Perl is more
than the vagaries of syntax. Perl is philosophy (there's more than one way to
do it; easy things should be easy, and hard things possible); Perl is custom
(comprehensive testing, idioms); Perl is architectural edifice (the
Comprehensive Perl Archive Network); and Perl is community (perl5-porters,
perl6-language).  Both Perl 5 and Perl 6 share these attributes to varying
degrees. As well, Perl is syncretic.  Just as Perl borrows good ideas from
other languages, so Perl 5 and Perl 6 share features.

=head1 Perl 6 implementations

X<Rakudo>

Perl 6 is a specification. Any implementation that passes the official test
suite can call itself "Perl 6". Several implementations exist at various levels
of maturity. All of the examples in this book will run with the I<Rakudo Perl
6> Compiler, but they are in no way specific to Rakudo--any sufficiently
advanced Perl 6 implementation can run them.  Good luck and--as the Perl 6
community often says--have fun!

=head1 Obtaining Rakudo

For complete instructions for downloading and installing Rakudo, see
U<http://www.rakudo.org/how-to-get-rakudo>. Monthly source code releases
for the compiler are available at U<http://rakudo.org/downloads/rakudo/>.
However, you may want to obtain the "early adopter" distribution of
Rakudo called I<Rakudo Star>. The Rakudo Star distribution is available
at U<http://rakudo.org/downloads/star/>. It contains the Rakudo Perl 6
compiler, some useful modules, and a copy of this book.

=head1 Executing programs

To run a Perl 6 program with Rakudo, include the installation directory in your
system C<PATH> variable and issue a command like:

=begin screen

    $ perl6 hello.pl

=end screen

If you invoke the Rakudo compiler without an explicit script to run, it enters
an interactive mode that allows the execution of Perl 6 statements from
the command line. A so-called "read eval print loop" (a.k.a. REPL).

=head1 Getting involved

If you are inspired by the contents of this book and want to contribute
to the Perl 6 community, there are some resources available to you:

=over

=item World Wide Web

The Perl 6 homepage at C<http://perl6.org/> links to many useful resources.

=item IRC

The channel C<#perl6> on C<irc.freenode.net> discusses all things Perl 6.

=item Mailing lists

If you need programming help with Perl 6, send an email to
C<perl6-users@perl.org>.

For issues regarding the Perl 6 language specification, contact
C<perl6-language@perl.org>. For issues regarding Perl 6 compilers, send email
to C<perl6-compiler@perl.org>.

=back

=for editors

=head1 Copy-n-paste doesn't work

Can't safely copy-n-paste examples from the PDF because many don't flow sanely.

Examples use non-ASCII quote chars (ideally fix or else explain in sidebar).

=head1 Examples

Tell readers how to download examples. Perhaps suggest they copy-n-paste from
the pod on github.

=head1 Entering non-ASCII ops

Many users won't know how to enter non-ASCII ops like the double arrows.
Add explanations for PC and Mac keyboards (but beware of variations in national
keyboards, so also give meta help, like using "open -a KeyboardViewer" on OS X
and pressing the meta keys like Alt and Shift to see the characters).

=head1 Glossary

Add a glossary of terms (immutable, desugar etc)

=head1 Acknowledgements

Surely we'll want to thank some people!  :-)

=end for
